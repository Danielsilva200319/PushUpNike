// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(NikeContext))]
    [Migration("20231214163436_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address1")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Address");

                    b.Property<int?>("IdCity")
                        .HasColumnType("int")
                        .HasColumnName("idCity");

                    b.Property<int?>("IdPostalCode")
                        .HasColumnType("int")
                        .HasColumnName("idPostalCode");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdCity" }, "idCity");

                    b.HasIndex(new[] { "IdPostalCode" }, "idPostalCode");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Category1")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Category");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("IdDepartment")
                        .HasColumnType("int")
                        .HasColumnName("idDepartment");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdDepartment" }, "idDepartment");

                    b.ToTable("city", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("IdAddress")
                        .HasColumnType("int")
                        .HasColumnName("idAddress");

                    b.Property<int?>("IdCity")
                        .HasColumnType("int")
                        .HasColumnName("idCity");

                    b.Property<int?>("IdDiscount")
                        .HasColumnType("int")
                        .HasColumnName("idDiscount");

                    b.Property<int?>("IdPhone")
                        .HasColumnType("int")
                        .HasColumnName("idPhone");

                    b.Property<int?>("IdTypeClient")
                        .HasColumnType("int")
                        .HasColumnName("idTypeClient");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdAddress" }, "idAddress");

                    b.HasIndex(new[] { "IdCity" }, "idCity")
                        .HasDatabaseName("idCity1");

                    b.HasIndex(new[] { "IdDiscount" }, "idDiscount");

                    b.HasIndex(new[] { "IdPhone" }, "idPhone");

                    b.HasIndex(new[] { "IdTypeClient" }, "idTypeClient");

                    b.ToTable("client", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.County", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("county", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("IdCountry")
                        .HasColumnType("int")
                        .HasColumnName("idCountry");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdCountry" }, "idCountry");

                    b.ToTable("department", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Discount", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Discount1")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Discount");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("IdStatus")
                        .HasColumnType("int")
                        .HasColumnName("idStatus");

                    b.Property<double?>("Percentage")
                        .HasColumnType("double(5,2)");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdStatus" }, "idStatus");

                    b.ToTable("discount", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Department")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("IdAddress")
                        .HasColumnType("int")
                        .HasColumnName("idAddress");

                    b.Property<int?>("IdCity")
                        .HasColumnType("int")
                        .HasColumnName("idCity");

                    b.Property<int?>("IdPhone")
                        .HasColumnType("int")
                        .HasColumnName("idPhone");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Position")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdAddress" }, "idAddress")
                        .HasDatabaseName("idAddress1");

                    b.HasIndex(new[] { "IdCity" }, "idCity")
                        .HasDatabaseName("idCity2");

                    b.HasIndex(new[] { "IdPhone" }, "idPhone")
                        .HasDatabaseName("idPhone1");

                    b.ToTable("employee", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("IdClient")
                        .HasColumnType("int")
                        .HasColumnName("idClient");

                    b.Property<int?>("IdPayment")
                        .HasColumnType("int")
                        .HasColumnName("idPayment");

                    b.Property<int?>("IdProduct")
                        .HasColumnType("int")
                        .HasColumnName("idProduct");

                    b.Property<int?>("IdShipment")
                        .HasColumnType("int")
                        .HasColumnName("idShipment");

                    b.Property<int?>("IdStatus")
                        .HasColumnType("int")
                        .HasColumnName("idStatus");

                    b.Property<int?>("IdTypeOrder")
                        .HasColumnType("int")
                        .HasColumnName("idTypeOrder");

                    b.Property<DateOnly?>("OrderDate")
                        .HasColumnType("date");

                    b.Property<int?>("TotalAmount")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdClient" }, "idClient");

                    b.HasIndex(new[] { "IdPayment" }, "idPayment");

                    b.HasIndex(new[] { "IdProduct" }, "idProduct");

                    b.HasIndex(new[] { "IdShipment" }, "idShipment");

                    b.HasIndex(new[] { "IdStatus" }, "idStatus")
                        .HasDatabaseName("idStatus1");

                    b.HasIndex(new[] { "IdTypeOrder" }, "idTypeOrder");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("IdClient")
                        .HasColumnType("int")
                        .HasColumnName("idClient");

                    b.Property<int?>("IdStatus")
                        .HasColumnType("int")
                        .HasColumnName("idStatus");

                    b.Property<int?>("IdTypePayment")
                        .HasColumnType("int")
                        .HasColumnName("idTypePayment");

                    b.Property<DateOnly?>("PaymentDate")
                        .HasColumnType("date");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdClient" }, "idClient")
                        .HasDatabaseName("idClient1");

                    b.HasIndex(new[] { "IdStatus" }, "idStatus")
                        .HasDatabaseName("idStatus2");

                    b.HasIndex(new[] { "IdTypePayment" }, "idTypePayment");

                    b.ToTable("payment", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Phone", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Phone1")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Phone");

                    b.Property<string>("TypePhone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("phone", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Postalcode", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("IdCity")
                        .HasColumnType("int")
                        .HasColumnName("idCity");

                    b.Property<string>("PostalCode1")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PostalCode");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdCity" }, "idCity")
                        .HasDatabaseName("idCity3");

                    b.ToTable("postalcode", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("IdCategory")
                        .HasColumnType("int")
                        .HasColumnName("idCategory");

                    b.Property<int?>("IdTypeProduct")
                        .HasColumnType("int")
                        .HasColumnName("idTypeProduct");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<double?>("Price")
                        .HasColumnType("double");

                    b.Property<int?>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdCategory" }, "idCategory");

                    b.HasIndex(new[] { "IdTypeProduct" }, "idTypeProduct");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime");

                    b.Property<int>("IdUserFk")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime");

                    b.Property<string>("Token")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("IdUserFk");

                    b.ToTable("refreshToken", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("rol", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Shipment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateOnly?>("ActualArrival")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("EstimatedArrival")
                        .HasColumnType("date");

                    b.Property<int?>("IdAddress")
                        .HasColumnType("int")
                        .HasColumnName("idAddress");

                    b.Property<int?>("IdStatus")
                        .HasColumnType("int")
                        .HasColumnName("idStatus");

                    b.Property<int?>("IdTypeShipment")
                        .HasColumnType("int")
                        .HasColumnName("idTypeShipment");

                    b.Property<DateOnly?>("ShipmentDate")
                        .HasColumnType("date");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdAddress" }, "idAddress")
                        .HasDatabaseName("idAddress2");

                    b.HasIndex(new[] { "IdStatus" }, "idStatus")
                        .HasDatabaseName("idStatus3");

                    b.HasIndex(new[] { "IdTypeShipment" }, "idTypeShipment");

                    b.ToTable("shipment", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EntityName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Status1")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Status");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("status", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Typeclient", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("TypeClient1")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TypeClient");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("typeclient", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Typeorder", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("TypeOrder1")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TypeOrder");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("typeorder", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Typepayment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("TypePayment1")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TypePayment");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("typepayment", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Typeproduct", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TypeProduct1")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TypeProduct");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("typeproduct", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Typeshipment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("TypeShipment1")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TypeShipment");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("typeshipment", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("varchar(225)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserRol", b =>
                {
                    b.Property<int>("IdUserFk")
                        .HasColumnType("int");

                    b.Property<int>("IdRolFk")
                        .HasColumnType("int");

                    b.HasKey("IdUserFk", "IdRolFk");

                    b.HasIndex("IdRolFk");

                    b.ToTable("userrol", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.HasOne("Domain.Entities.City", "IdCityNavigation")
                        .WithMany("Addresses")
                        .HasForeignKey("IdCity")
                        .HasConstraintName("address_ibfk_2");

                    b.HasOne("Domain.Entities.Postalcode", "IdPostalCodeNavigation")
                        .WithMany("Addresses")
                        .HasForeignKey("IdPostalCode")
                        .HasConstraintName("address_ibfk_1");

                    b.Navigation("IdCityNavigation");

                    b.Navigation("IdPostalCodeNavigation");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.HasOne("Domain.Entities.Department", "IdDepartmentNavigation")
                        .WithMany("Cities")
                        .HasForeignKey("IdDepartment")
                        .HasConstraintName("city_ibfk_1");

                    b.Navigation("IdDepartmentNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.HasOne("Domain.Entities.Address", "IdAddressNavigation")
                        .WithMany("Clients")
                        .HasForeignKey("IdAddress")
                        .HasConstraintName("client_ibfk_2");

                    b.HasOne("Domain.Entities.City", "IdCityNavigation")
                        .WithMany("Clients")
                        .HasForeignKey("IdCity")
                        .HasConstraintName("client_ibfk_1");

                    b.HasOne("Domain.Entities.Discount", "IdDiscountNavigation")
                        .WithMany("Clients")
                        .HasForeignKey("IdDiscount")
                        .HasConstraintName("client_ibfk_5");

                    b.HasOne("Domain.Entities.Phone", "IdPhoneNavigation")
                        .WithMany("Clients")
                        .HasForeignKey("IdPhone")
                        .HasConstraintName("client_ibfk_3");

                    b.HasOne("Domain.Entities.Typeclient", "IdTypeClientNavigation")
                        .WithMany("Clients")
                        .HasForeignKey("IdTypeClient")
                        .HasConstraintName("client_ibfk_4");

                    b.Navigation("IdAddressNavigation");

                    b.Navigation("IdCityNavigation");

                    b.Navigation("IdDiscountNavigation");

                    b.Navigation("IdPhoneNavigation");

                    b.Navigation("IdTypeClientNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.HasOne("Domain.Entities.County", "IdCountryNavigation")
                        .WithMany("Departments")
                        .HasForeignKey("IdCountry")
                        .HasConstraintName("department_ibfk_1");

                    b.Navigation("IdCountryNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Discount", b =>
                {
                    b.HasOne("Domain.Entities.Status", "IdStatusNavigation")
                        .WithMany("Discounts")
                        .HasForeignKey("IdStatus")
                        .HasConstraintName("discount_ibfk_1");

                    b.Navigation("IdStatusNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.HasOne("Domain.Entities.Address", "IdAddressNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("IdAddress")
                        .HasConstraintName("employee_ibfk_1");

                    b.HasOne("Domain.Entities.City", "IdCityNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("IdCity")
                        .HasConstraintName("employee_ibfk_3");

                    b.HasOne("Domain.Entities.Phone", "IdPhoneNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("IdPhone")
                        .HasConstraintName("employee_ibfk_2");

                    b.Navigation("IdAddressNavigation");

                    b.Navigation("IdCityNavigation");

                    b.Navigation("IdPhoneNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.Client", "IdClientNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdClient")
                        .HasConstraintName("order_ibfk_1");

                    b.HasOne("Domain.Entities.Payment", "IdPaymentNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdPayment")
                        .HasConstraintName("order_ibfk_4");

                    b.HasOne("Domain.Entities.Product", "IdProductNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdProduct")
                        .HasConstraintName("order_ibfk_6");

                    b.HasOne("Domain.Entities.Shipment", "IdShipmentNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdShipment")
                        .HasConstraintName("order_ibfk_3");

                    b.HasOne("Domain.Entities.Status", "IdStatusNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdStatus")
                        .HasConstraintName("order_ibfk_5");

                    b.HasOne("Domain.Entities.Typeorder", "IdTypeOrderNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdTypeOrder")
                        .HasConstraintName("order_ibfk_2");

                    b.Navigation("IdClientNavigation");

                    b.Navigation("IdPaymentNavigation");

                    b.Navigation("IdProductNavigation");

                    b.Navigation("IdShipmentNavigation");

                    b.Navigation("IdStatusNavigation");

                    b.Navigation("IdTypeOrderNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.HasOne("Domain.Entities.Client", "IdClientNavigation")
                        .WithMany("Payments")
                        .HasForeignKey("IdClient")
                        .HasConstraintName("payment_ibfk_1");

                    b.HasOne("Domain.Entities.Status", "IdStatusNavigation")
                        .WithMany("Payments")
                        .HasForeignKey("IdStatus")
                        .HasConstraintName("payment_ibfk_3");

                    b.HasOne("Domain.Entities.Typepayment", "IdTypePaymentNavigation")
                        .WithMany("Payments")
                        .HasForeignKey("IdTypePayment")
                        .HasConstraintName("payment_ibfk_2");

                    b.Navigation("IdClientNavigation");

                    b.Navigation("IdStatusNavigation");

                    b.Navigation("IdTypePaymentNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Postalcode", b =>
                {
                    b.HasOne("Domain.Entities.City", "IdCityNavigation")
                        .WithMany("Postalcodes")
                        .HasForeignKey("IdCity")
                        .HasConstraintName("postalcode_ibfk_1");

                    b.Navigation("IdCityNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.HasOne("Domain.Entities.Category", "IdCategoryNavigation")
                        .WithMany("Products")
                        .HasForeignKey("IdCategory")
                        .HasConstraintName("product_ibfk_2");

                    b.HasOne("Domain.Entities.Typeproduct", "IdTypeProductNavigation")
                        .WithMany("Products")
                        .HasForeignKey("IdTypeProduct")
                        .HasConstraintName("product_ibfk_1");

                    b.Navigation("IdCategoryNavigation");

                    b.Navigation("IdTypeProductNavigation");
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.User", "Users")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("IdUserFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Shipment", b =>
                {
                    b.HasOne("Domain.Entities.Address", "IdAddressNavigation")
                        .WithMany("Shipments")
                        .HasForeignKey("IdAddress")
                        .HasConstraintName("shipment_ibfk_1");

                    b.HasOne("Domain.Entities.Status", "IdStatusNavigation")
                        .WithMany("Shipments")
                        .HasForeignKey("IdStatus")
                        .HasConstraintName("shipment_ibfk_2");

                    b.HasOne("Domain.Entities.Typeshipment", "IdTypeShipmentNavigation")
                        .WithMany("Shipments")
                        .HasForeignKey("IdTypeShipment")
                        .HasConstraintName("shipment_ibfk_3");

                    b.Navigation("IdAddressNavigation");

                    b.Navigation("IdStatusNavigation");

                    b.Navigation("IdTypeShipmentNavigation");
                });

            modelBuilder.Entity("Domain.Entities.UserRol", b =>
                {
                    b.HasOne("Domain.Entities.Rol", "Rols")
                        .WithMany("UserRols")
                        .HasForeignKey("IdRolFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "Users")
                        .WithMany("UserRols")
                        .HasForeignKey("IdUserFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rols");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Employees");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Clients");

                    b.Navigation("Employees");

                    b.Navigation("Postalcodes");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Domain.Entities.County", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Domain.Entities.Discount", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Entities.Phone", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Domain.Entities.Postalcode", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Entities.Rol", b =>
                {
                    b.Navigation("UserRols");
                });

            modelBuilder.Entity("Domain.Entities.Shipment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Entities.Status", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("Orders");

                    b.Navigation("Payments");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("Domain.Entities.Typeclient", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("Domain.Entities.Typeorder", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Entities.Typepayment", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Domain.Entities.Typeproduct", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Typeshipment", b =>
                {
                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserRols");
                });
#pragma warning restore 612, 618
        }
    }
}
